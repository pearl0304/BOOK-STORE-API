# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Tranlator {
  id: ID!
  name: String!
  book: [Book]
}

type User {
  id: ID!
  name: String
  email: String
  nick: String
  password: String
  address1: String
  address2: String
  zip_code: String
  preferred_genre: String
  created_date: String
  update_date: String
  delete_date: String
  is_delete: Boolean
  point: Int
}

type Like {
  id: ID
  userId: ID!
  bookId: ID!
  user: User
  book: Book
  action: ActionType!
}

enum ActionType {
  ADD
  REMOVE
}

type Book {
  id: ID!
  authorId: ID!
  translatorId: ID
  title: String!
  price: Int!
  isbn: Float
  total_page: Float
  book_size: String
  publication_date: String
  publisher: String
  stock: Int!
  status: BookStatus!
  author: Author
  translator: Tranlator
  like: [Like]
  total_like: Int!
  genre: BookGenre!
}

enum BookStatus {
  SALE
  SOLD_OUT
  READY
}

enum BookGenre {
  FICTION
  FINANCE
  HUMANITIES
}

type Author {
  id: ID!
  name: String!
  book: [Book]
}

type Cart {
  id: ID
  userId: ID!
  bookId: ID!
  user: User
  book: Book
  action: ActionType!
}

type Order {
  id: ID!
  finalId: String
  userId: ID!
  bookId: ID!
  user: User
  book: Book
  created_date: String
  updated_date: String
  status: OrderStatus!
}

enum OrderStatus {
  PENDING
  READY
  DELIVERY
  RETURN
  DONE
}

type OrderResult {
  list: [Order]
  total_price: Int!
  total_count: Int!
}

type Buy {
  id: ID!
  userId: ID!
  orderIds: [ID!]
  order: [Order!]
  total_price: Int!
  receiver: String!
  sender: String!
  address1: String!
  address2: String
  zip_code: String!
  payment_status: PaymentStatus!
  created_date: String!
}

enum PaymentStatus {
  BEFORE_PAYMENT
  COMPLETE
  REFUND
}

type Query {
  findAllAuthors: [Author]
  findAuthorById(id: ID!): Author!
  findAllBooks: [Book]
  findBookById(id: ID!): Book!
  findAllUsers: [User]
  findUserById(id: ID!): User!
  findMyOrderList(userId: ID!, status: OrderStatus!): OrderResult
  findOrderById(orderId: ID!): Order!
  findMyLikeList(userId: ID!): [Like]
  findUserLike(bookId: ID!): [Like]
  findAllTranslators: [Tranlator]
  findTranslatorById(id: ID!): Tranlator!
  findMyCartList(userId: ID!): [Cart]
  findMyBuyList(userId: ID!): [Buy!]!
  findBuyListById(buyId: ID!): [Buy!]!
}

type Mutation {
  createAuthor(input: CreateAuthorInput!): Author!
  createBook(input: BookInputType!): Book!
  updateBook(id: ID!, input: UpdateBookType!): Book!
  deleteBook(id: ID!): ID!
  createUser(input: UserInputType!): User!
  updateUserInfo(id: ID!, input: UserInputType!): User!
  deleteUser(id: ID!): ID!
  deleteUserByAdmin(id: ID!): ID!
  createOrderList(input: createOrderListInput!): Order
  deleteOrder(orderId: ID!): ID!
  updateOrderStatus(orderId: ID!, status: OrderStatus!): Order!
  doLike(input: CreateLikeInput!): Like
  deleteLikeByBookId(bookId: ID!): ID!
  createTranslator(input: CreateTranlatorInput!): Tranlator!
  createCart(input: CreateCartInput!): Cart
  deleteCartByBookId(bookId: ID!): ID!
  buyBooks(input: BuyInputType!): Buy!
  updatePaymentStatus(buyId: ID!, payment_status: PaymentStatus!): Buy!
}

input CreateAuthorInput {
  name: String!
  nationality: String
}

input BookInputType {
  authorId: ID!
  translatorId: ID
  title: String!
  price: Int!
  isbn: Float
  total_page: Float
  book_size: String
  publication_date: String
  publisher: String
  stock: Int!
  status: BookStatus!
  genre: BookGenre!
}

input UpdateBookType {
  price: Int
  stock: Int
  status: BookStatus
}

input UserInputType {
  name: String!
  email: String!
  nick: String!
  password: String!
  address1: String
  address2: String
  zip_code: String
  preferred_genre: String
}

input createOrderListInput {
  userId: ID!
  bookId: ID!
  sale_price: Int!
}

input CreateLikeInput {
  id: ID
  userId: ID!
  bookId: ID!
  action: ActionType!
}

input CreateTranlatorInput {
  name: String!
  nationality: String
}

input CreateCartInput {
  id: ID
  userId: ID!
  bookId: ID!
  action: ActionType!
}

input BuyInputType {
  userId: ID!
  orderIds: [ID!]
  total_price: Int!
  receiver: String!
  sender: String!
  address1: String!
  address2: String
  zip_code: String!
  payment_status: PaymentStatus!
}